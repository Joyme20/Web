基于https://www.jianshu.com/p/42e11515c10f
先看上面那篇就好理解了

！！我们的目的是打包indexJQ.js和index.css ！！

基本流程：
  windows在cmd进入想要创建webpack项目的文件夹
 
  安装：
  //全局安装
  npm install -g webpack
  //安装到你的项目目录
  npm install --save-dev webpack

  使用 npm init 命令可以自动创建这个package.json文件
  自己创建main.js和webpack.config.js
  
  有了这个配置之后，只需在终端里运行webpack(非全局安装需使用node_modules/.bin/webpack)命令就可以了，
  这条命令会自动引用webpack.config.js文件中的配置选项
================================================================================


文件结构如下：
--script
  --main.js
  --indexJQ.js
--styles
  --index.css 
--webpack.json
--webpack.config.js
--index.html
========================================================================


main.js代码：
'use strict';
require("../styles/index.css");  //要打包的东西用 require 导进来
require("../scripts/indexJQ.js");
=========================================================================


通过配置文件来使用Webpack
在当前练习文件夹的根目录下新建一个名为webpack.config.js的文件，我们在其中写入如下所示的简单配置代码，
目前的配置主要涉及到的内容是入口文件路径和打包后文件的存放路径。


=========================================================================


webpack.config.js代码：
var webpack = require("webpack");
var path= require("path");
module.exports = {
    entry: __dirname + "/scripts/main.js",//已多次提及的唯一入口文件
                                          //注：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。
    output: {
        path: __dirname + "/afterWebpack",//打包后的文件存放的地方
        filename: "bundle.js",//打包后输出文件的文件名
        publicPath: "dist/" //images url
    },
    
 //module里的是处理各种文件的编译器
    module:{
        rules: [
            {
                test: /\.css$/,
                loader: "style-loader!css-loader"
            },
            {
                test: /\.js$/,
                loader: "babel-loader" //loader or use?
            },
            {
                test: /\.(png|jpg)$/,
                loader: "url-loader?limit=8192"
                // loader: "url-loader?limit=8192&name=images/[hash:8].[name].[ext]"
            },
            // {
            //     test:/\.(gif|png|jpg|woff|svg|ttf|eot)$/,//图片的处理
            //     use: [{
            //         loader: 'url-loader',
            //         options: {
            //             limit: 500,//当图片小于这个值他会生成一个图片的url 如果是一个大于的他会生成一个base64的图片在js里展示
            //             outputPath: 'img/',// 指定打包后的图片位置
            //             name: '[name].[ext]?[hash]',//name:'[path][name].[ext]
            //             //publicPath:output,
            //
            //         }
            //     }, /*{
            //         loader: 'file-loader',
            //         options: {
            //             limit:50,
            //             name: '[name].[ext]?[hash]',
            //             outputPath: 'img/',
            //         }
            //
            //     }*/]
            // },


            // {
            //     test: /\.ttf$/,
            //     // loader: "file-loader"
            //     loader: "url-loader"
            //
            //     // loader: 'file?prefix=font/'
            //     // loader: "url-loader?limit=10000&mimetype=application/octet-stream"
            // }

        ]
    },
    plugins:[            //此处是插件，我在这里安装了jquery
        new webpack.ProvidePlugin({
            $:"jquery",
            jQuery:"jquery",
            "window.jQuery":"jquery"
        })
    ],
    resolve: {
        extensions: [ '.js', '.jsx', '.css'],
        // modulesDirectories: [
        //     'node_modules'
        // ]
    }

};
========================================================================


